openapi: 3.0.3
info:
  title: Easyappz Marketplace API
  version: 1.0.0
  description: |
    Core catalog API (categories, sellers, products, reviews, uploads).
    Authentication via Authorization header with Bearer JWT token. No cookies.
servers:
  - url: /api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Category:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        slug: { type: string, nullable: true }
        description: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Seller:
      type: object
      properties:
        _id: { type: string }
        user: { type: string }
        shopName: { type: string }
        description: { type: string, nullable: true }
        rating: { type: number }
        followers: { type: number }
        avatarUrl: { type: string, nullable: true }
        bannerUrl: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Product:
      type: object
      properties:
        _id: { type: string }
        title: { type: string }
        slug: { type: string, nullable: true }
        description: { type: string }
        price: { type: number }
        discountPrice: { type: number, nullable: true }
        images:
          type: array
          items: { type: string }
        stock: { type: number }
        category: { anyOf: [{ $ref: '#/components/schemas/Category' }, { type: string, nullable: true }] }
        seller: { anyOf: [{ $ref: '#/components/schemas/Seller' }, { type: string, nullable: true }] }
        ratingAvg: { type: number }
        reviewsCount: { type: number }
        attributes: { type: object }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Review:
      type: object
      properties:
        _id: { type: string }
        product: { type: string }
        user: { type: string }
        rating: { type: number }
        comment: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    PaginatedResponse:
      type: object
      properties:
        items:
          type: array
          items: { type: object }
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }
security:
  - bearerAuth: []
paths:
  /categories:
    get:
      summary: List categories (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Category' }
        '500': { description: Server error }
    post:
      summary: Create category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                slug: { type: string, nullable: true }
                description: { type: string, nullable: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  item: { $ref: '#/components/schemas/Category' }
        '400': { description: Bad request }
  /categories/{id}:
    put:
      summary: Update category
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                slug: { type: string }
                description: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
    delete:
      summary: Delete category
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '404': { description: Not found }

  /sellers/register:
    post:
      summary: Create seller profile for current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [shopName]
              properties:
                shopName: { type: string }
                description: { type: string }
                avatarUrl: { type: string }
                bannerUrl: { type: string }
      responses:
        '201': { description: Created }
        '400': { description: Bad request }

  /sellers/{id}:
    get:
      summary: Get seller profile by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '400': { description: Invalid id }
        '404': { description: Not found }

  /sellers/{id}/products:
    get:
      summary: List products of a seller (filters, sorting, pagination)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: q
          schema: { type: string, description: 'Full-text search (uses MongoDB $text)' }
        - in: query
          name: category
          schema: { type: string, description: 'Category id or slug' }
        - in: query
          name: priceMin
          schema: { type: number }
        - in: query
          name: priceMax
          schema: { type: number }
        - in: query
          name: sort
          schema:
            type: string
            enum: [price_asc, price_desc, createdAt_asc, createdAt_desc, rating_asc, rating_desc]
            default: createdAt_desc
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20, maximum: 100 }
      responses:
        '200': { description: OK }
        '400': { description: Invalid seller id }

  /products:
    get:
      summary: List products (filters, sorting, pagination)
      parameters:
        - in: query
          name: q
          schema: { type: string, description: 'Full-text search using $text (title, description)' }
        - in: query
          name: category
          schema: { type: string, description: 'Category id or slug' }
        - in: query
          name: seller
          schema: { type: string, description: 'Seller id' }
        - in: query
          name: priceMin
          schema: { type: number }
        - in: query
          name: priceMax
          schema: { type: number }
        - in: query
          name: sort
          schema:
            type: string
            enum: [price_asc, price_desc, createdAt_asc, createdAt_desc, rating_asc, rating_desc]
            default: createdAt_desc
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20, maximum: 100 }
        - in: query
          name: isActive
          schema: { type: boolean, description: 'Filter by active state. Defaults to true.' }
      responses:
        '200': { description: OK }
        '500': { description: Server error }
    post:
      summary: Create product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, price]
              properties:
                title: { type: string }
                slug: { type: string, nullable: true }
                description: { type: string }
                price: { type: number }
                discountPrice: { type: number }
                images:
                  type: array
                  items: { type: string }
                stock: { type: number }
                category: { type: string, description: 'Category id' }
                seller: { type: string, description: 'Seller id (admin only)' }
                attributes: { type: object }
                isActive: { type: boolean }
      responses:
        '201': { description: Created }
        '400': { description: Bad request }

  /products/{idOrSlug}:
    get:
      summary: Get product by id or slug
      parameters:
        - in: path
          name: idOrSlug
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /products/{id}:
    put:
      summary: Update product (owner or admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                slug: { type: string }
                description: { type: string }
                price: { type: number }
                discountPrice: { type: number }
                images:
                  type: array
                  items: { type: string }
                stock: { type: number }
                category: { type: string }
                attributes: { type: object }
                isActive: { type: boolean }
      responses:
        '200': { description: OK }
        '400': { description: Bad request }
        '403': { description: Forbidden }
        '404': { description: Not found }
    delete:
      summary: Delete product (owner or admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '403': { description: Forbidden }
        '404': { description: Not found }

  /products/{id}/reviews:
    get:
      summary: List reviews for a product
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '400': { description: Invalid product id }
    post:
      summary: Add a review for a product (one per user)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating]
              properties:
                rating: { type: number, minimum: 1, maximum: 5 }
                comment: { type: string }
      responses:
        '201': { description: Created }
        '400': { description: Bad request or duplicate }

  /reviews/{id}:
    delete:
      summary: Delete review (owner or admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Deleted }
        '403': { description: Forbidden }
        '404': { description: Not found }

  /upload/images:
    post:
      summary: Upload images (seller/admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  urls:
                    type: array
                    items: { type: string, example: /uploads/1700000000000-filename.jpg }
        '400': { description: Bad request }
